class Controller
  constructor: (@model, @scene, @factory) ->
    @model.setRoot @factory.make('root')

    @render   = (event) => @scene.add    event.renderable.object
    @unrender = (event) => @scene.remove event.renderable.object

  getRoot: () ->
    @model.getRoot()

  getTypes: () ->
    @factory.getTypes()

  make: (type, options) ->
    @factory.make type, options

  add: (primitive, target = @model.getRoot()) ->

    # Monitor renderables generated by primitive
    primitive.on 'render',   @render
    primitive.on 'unrender', @unrender

    # Add primitive into tree
    target.add primitive

  remove: (primitive) ->
    primitive.unmake()

    # Remove primitive from tree
    target = primitive.parent || @model.getRoot()
    target.remove primitive

    # Stop monitoring renderables
    primitive.off 'render',   @render
    primitive.off 'unrender', @unrender

module.exports = Controller